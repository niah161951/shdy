# -*- coding: utf-8 -*-
# 作者   : Lenovo
# 时间   : 2020/8/11 19:35
import configparser,os,time
from public.logs import Log

class Config:
    '''
    配置文件操作
    '''
    def __init__(self):
        self.times = time.strftime('%Y%m%d')
        self.conf = configparser.ConfigParser()
        self.path_name = os.path.split(os.path.realpath(__file__))[0]
        self.conf_path = os.path.join(self.path_name, 'conf.ini')
        self.conf.read(self.conf_path,encoding='gbk')
        if not os.path.exists(self.conf_path):
            Log().info("请确保配置文件存在！")
            raise FileNotFoundError("请确保配置文件存在！")

    def set_conf(self,param, name, value):
        '''
        新增配置文件数据
        :param param:
        :param name:
        :param value:
        :return:
        '''

        try:
            # self.conf.add_section( param.upper())
            self.conf.set( param.upper(), name+self.times, value)
            with open(self.conf_path, 'w+') as f:
                return self.conf.write(f)

        except configparser.DuplicateSectionError:
            self.conf.set( param.upper(), self.times+name, value)
            with open(self.conf_path, 'w+') as f:
                return self.conf.write(f)

    def read_conf(self, key, value):
        """
        读取配置文件中的param相关信息
        :param key:
        :param value:
        :return:
        """
        try:
            values = self.conf.get(key, value)
            Log().info(f'输入{key},{value}值,结果：{values}')
            return values

        except Exception as error:
            Log().error(f'未知错误：{error}')

    def update_conf(self, title, value, text):
        """
        配置文件修改
        :param title:
        :param value:
        :param text:
        :return:
        """
        self.conf.set(title, value, text)
        with open(self.conf_path, "w+") as f:
            Log().info(f'修改配置文件{title},{value}值,结果：{text}')
            return self.conf.write(f)

    def set_param(self, name, value):
        '''
        新增配置文件数据
        :param param:
        :param name:
        :param value:
        :return:
        '''
        try:
            self.conf.add_section("DATA")
            self.conf.set("DATA", name, value)
            with open(self.conf_path, 'w') as f:
                Log().info(f'获取数据：输入{name},{value}')
                return self.conf.write(f)

        except configparser.DuplicateSectionError:
            self.conf.set("DATA", name, value)
            with open(self.conf_path, 'w') as f:
                return self.conf.write(f)

    def get_str(self,s, f, b):
        '''
        获取特定字符串
        :param s:
        :param f:
        :param b:
        :return:
        '''
        par = s.partition(f)
        getstr = (par[2].partition(b))[0][:]
        Log().info(f'获取原始字符串：\n{s}   \n使用get_str方法截取字符串，结果：{getstr}')
        return getstr

if __name__=="__main__":
    s=Config()
    ss = 'rspCode=PPD10003&rspMessage=合作机构路由未配置&payInfo=&merchantId=872290270135000&tradeType=&tradeNo=202003060059717250&signType=RSA&orderId=&transAmt=1&orderTime=&version=1.1&charset=00&wcPayData=&tn=&extendInfo=&payUrl=&jsAppId=&jsAppUrl=&serverCertserverSign=1638EAAC5463DA53584C1146A5FD8452AEBD6B3672D56752D4763CB291CFCBD5DB98D970E880DB684480862AEF70D6FD1D981CB7E80BECF52A628FE2ED7770F36905A61DC3C35AC5E76CDDFBD803978B8942E25BAD20DE1E53779F5DBA92B9792BBC4C7D4C328216B5DDA6ABC2D2BAD749AC124531409B853DB56BCCB7F2FD2EE6613BFD418A19F677307BC69FF4B856DC270FA28FEDA048E75D96C320D555137532F828E5121A02583C78A0F315AFD0D01CBFA906DB33D0DC9E47B99CFAD40DA516736BD7B70A1B89A986521920897DF2BE3467C524CEF1813B2697B7462B17E24C599921E1F4DCFA204F5703DAEE597EEC52A225CA0148B1185FC8AA39D635'
    merid = s.set_conf('MERCID', '新增快速商户', '1231514')
    a = s.read_conf('MERCID','新增快速商户')
    d = s.get_str(ss,'rspMessage=','&payInfo')
    print(d)
    print(a,merid)

